class Solution {
public:
    bool isBST(TreeNode* root, long long min, long long max) {
        if (root == NULL)
            return true;

        if (root->val > min && root->val < max) {  // Use strict inequality here
            bool left = isBST(root->left, min, root->val);
            bool right = isBST(root->right, root->val, max);
            return left && right;
        }
        else {
            return false;
        }
    }
    
    bool isValidBST(TreeNode* root) {
        return isBST(root, LLONG_MIN, LLONG_MAX);  // Use long long type for min and max values
    }
};

Another method->

class Solution {
public:


    void solve(TreeNode* root, vector<int> &result) {
        if( root==NULL)
        return;

        solve(root->left, result);
        result.push_back(root->val);
        solve(root->right, result);
    }
    bool isValidBST(TreeNode* root) {
        vector<int> result;
        solve(root, result);

        int n = result.size();

        for( int i=1; i<n; i++) {
            if( result[i] <= result[i-1]) {
                return false;
            }
        }
        return true;

        
    }
};
