class Solution {
public:
    // Function to flatten a binary tree into a right-skewed structure.
    void flatten(TreeNode* root) {
        TreeNode* curr = root; // Initialize a pointer 'curr' to the root of the tree.

        // Step 1: Flatten the tree by modifying the right child pointers.
        while (curr != NULL) {
            // If the current node has a left child, find the rightmost node in its left subtree.
            if (curr->left) {
                TreeNode* pred = curr->left; // Initialize a pointer 'pred' to the left child.

                // Find the rightmost node in the left subtree of 'curr'.
                while (pred->right) 
                    pred = pred->right;

                // Make the rightmost node's right pointer point to 'curr's original right child.
                pred->right = curr->right;

                // Make 'curr's right child point to 'curr's left child.
                curr->right = curr->left;
                
                // Set 'curr's left child to NULL, as we are flattening the tree to the right.
                curr->left = NULL;    
            }
            // Move to the next node in the tree (towards the right).
            curr = curr->right;
        }

        // Step 2: Reset the left child pointers to NULL to fully flatten the tree.
        curr = root; // Reset 'curr' to the root of the tree.

        // Traverse the tree and set all left child pointers to NULL.
        while (curr != NULL) {
            curr->left = NULL;
            curr = curr->right;
        }
    }
};
