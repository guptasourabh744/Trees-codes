class Solution {
public:

    TreeNode* solve(vector<int>& postorder, int ps, int pe, vector<int>& inorder, int is, int ie, map<int, int> &mpp) {
        if(ps > pe || is > ie) return NULL;

        TreeNode* root = new TreeNode(postorder[pe]);

        int inroot = mpp[root->val];
        int numsleft = inroot - is;

        root->left = solve(postorder, ps, ps+numsleft-1, inorder, is, inroot-1, mpp);
        root->right = solve(postorder, ps+numsleft, pe-1, inorder, inroot+1, ie, mpp);

        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {

        map<int, int> mpp;

        for(int i=0; i<inorder.size(); i++) {
            mpp[inorder[i]] = i;
        }

        return solve(postorder, 0, postorder.size()-1, inorder,  0, inorder.size()-1, mpp);
        
    }
};
