For top view->   


class Solution
{
public:
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    vector<int> topView(Node* root)
    {
        vector<int> ans; // Vector to store the top view nodes

        if (root == NULL)
            return ans; // Return an empty vector if the tree is empty

        map<int, int> mpp; // Map to store the nodes based on their horizontal distances

        queue<pair<Node*, int>> q; // Queue to perform level-order traversal with horizontal distance

        q.push({root, 0}); // Enqueue the root node with horizontal distance 0

        while (!q.empty())
        {
            auto it = q.front();
            q.pop();

            Node* node = it.first; // Dequeue the front element and get the node and its horizontal distance
            int line = it.second;

            // If this horizontal distance is not already present in the map,
            // store the node's value in the map with this horizontal distance
            if (mpp.find(line) == mpp.end())
                mpp[line] = node->data;

            // Enqueue the left child with horizontal distance decreased by 1, if it exists
            if (node->left)
                q.push({node->left, line - 1});

            // Enqueue the right child with horizontal distance increased by 1, if it exists
            if (node->right)
                q.push({node->right, line + 1});
        }

        // Traverse the map and collect the nodes in the order of their horizontal distances
        for (auto it : mpp)
        {
            ans.push_back(it.second); // Store the node's value in the answer vector
        }
        
        return ans; // Return the vector containing nodes visible from the top view
    }
};


For bottom view-> 

just remove this line-> if (mpp.find(line) == mpp.end())

